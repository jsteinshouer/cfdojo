/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from Cfscript.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var CFScriptHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            include: "#comments"
        }, {
            include: "#cfcomments"
        }, {
            include: "#component-operators"
        }, {
            include: "#functions"
        }, {
            include: "#tag-operators"
        }, {
            include: "#cfscript-code"
        }],
        "#cfscript-code": [{
            include: "#braces"
        }, {
            include: "#closures"
        }, {
            include: "#sql-code"
        }, {
            include: "#keywords"
        }, {
            include: "#function-call"
        }, {
            include: "#constants"
        }, {
            include: "#variables"
        }, {
            include: "#strings"
        }],
        "#closures": [{
            token: "storage.closure.cfscript",
            regex: /\bfunction\b/,
            caseInsensitive: true,
            push: [{
                token: "meta.closure.cfscript",
                regex: /(?={)/,
                next: "pop"
            }, {
                include: "#parameters"
            }, {
                defaultToken: "meta.closure.cfscript"
            }]
        }],
        "#functions": [{
            token: [
                "meta.function.cfscript",
                "storage.modifier.access-control.cfscript",
                "meta.function.cfscript",
                "storage.type.return-type.void.cfscript",
                "storage.type.return-type.primitive.cfscript",
                "storage.type.return-type.object.cfscript",
                "meta.function.cfscript",
                "storage.type.function.cfscript",
                "meta.function.cfscript",
                "entity.name.function.constructor.cfscript",
                "entity.name.function.cfscript"
            ],
            regex: /^(\s*)(?:\b(private|package|public|remote)(\s+))?(?:\b(void)|(any|array|binary|boolean|component|date|guid|numeric|query|string|struct|xml|uuid)|([A-Za-z0-9_\.$]+))?(\s*)(function)(\s+)(?:(init)|([\w\$]+))\b/,
            caseInsensitive: true,
            push: [{
                token: "meta.function.cfscript",
                regex: /(?={)/,
                next: "pop"
            }, {
                include: "#parameters"
            }, {
                include: "#comments"
            }, {
                include: "#function-properties"
            }, {
                include: "#cfscript-code"
            }, {
                defaultToken: "meta.function.cfscript"
            }]
        }],
        "#parameters": [{
            token: "punctuation.definition.parameters.begin.cfscript",
            regex: /\(/,
            push: [{
                token: "punctuation.definition.parameters.end.cfscript",
                regex: /\)/,
                next: "pop"
            }, {
                token: "keyword.other.required.argument.cfscript",
                regex: /required/,
                caseInsensitive: true
            }, {
                include: "#storage-types"
            }, {
                token: "keyword.operator.argument-assignment.cfscript",
                regex: /=/
            }, {
                token: "constant.language.boolean.argument.cfscript",
                regex: /false|true|no|yes/,
                caseInsensitive: true
            }, {
                token: "variable.parameter.cfscript",
                regex: /\w/,
                caseInsensitive: true
            }, {
                token: "punctuation.definition.seperator.parameter.cfscript",
                regex: /,/
            }, {
                include: "#strings"
            }, {
                defaultToken: "meta.function.parameters.cfscript"
            }]
        }],
        "#function-properties": [{
            token: "entity.other.attribute-name.output.cfscript",
            regex: /\boutput/,
            caseInsensitive: true
        }, {
            token: "entity.other.attribute-name.any.cfscript",
            regex: /\b[\w]+/
        }],
        "#braces": [{
            token: "meta.brace.curly.cfscript",
            regex: /{|}/
        }, {
            token: "meta.brace.round.cfscript",
            regex: /\(|\)/
        }, {
            todo: {
                token: [
                    "variable.other.set.cfscript",
                    "text",
                    "punctuation.definition.set.begin.cfscript"
                ],
                regex: /((?:[\w]+)?)(\s*)(\[)/,
                push: [{
                    token: "punctuation.definition.set.end.cfscript",
                    regex: /\]/,
                    next: "pop"
                }, {
                    include: "#strings"
                }, {
                    token: "punctuation.definition.set.seperator.cfscript",
                    regex: /,/
                }, {
                    include: "$self"
                }]
            }
        }],
        "#tag-operators": [{
            token: "keyword.control.operator.conditional.cfscript",
            regex: /\b(?:else\s+if|else|if)\b/
        }, {
            token: "keyword.control.operator.switch.cfscript",
            regex: /\b(?:switch|case|default)\b/
        }, {
            token: [
                "meta.operator.cfscript",
                "entity.name.tag.operator.lock.cfscript",
                "entity.name.tag.operator.transaction.cfscript",
                "entity.name.tag.operator.thread.cfscript",
                "keyword.control.operator.abort.cfscript",
                "keyword.control.operator.exit.cfscript",
                "entity.name.tag.operator.include.cfscript",
                "entity.name.tag.operator.param.cfscript",
                "entity.name.tag.operator.thread.cfscript",
                "entity.name.tag.operator.import.cfscript",
                "keyword.control.operator.catch-exception.cfscript",
                "entity.name.tag.operator.property.cfscript",
                "entity.name.tag.operator.interface.cfscript",
                "entity.name.tag.operator.location.cfscript",
                "keyword.control.operator.break.cfscript",
                "entity.name.tag.operator.pageencoding.cfscript",
                "entity.name.tag.operator.schedule.cfscript",
                "keyword.control.operator.return.cfscript",
                "keyword.control.operator.catch-exception.cfscript",
                "keyword.control.operator.loop.cfscript",
                "entity.name.tag.operator.trace.cfscript",
                "entity.name.tag.operator.savecontent.cfscript",
                "entity.name.tag.operator.http.cfscript",
                "meta.operator.cfscript"
            ],
            regex: /^([\s}]*)(?:(lock)|(transaction)|(thread)|(abort)|(exit)|(include)|(param)|(thread)|(import)|(rethrow|throw)|(property)|(interface)|(location)|(break)|(pageencoding)|(schedule)|(return)|(try|catch|finally)|(for|in|do|while|break|continue)|(trace)|(savecontent)|(http|httpparam))\b(\s*)(?![^\w|"|'|\(|{|;])/,
            caseInsensitive: true,
            push: [{
                token: [
                    "punctuation.terminator.cfscript",
                    "meta.operator.cfscript"
                ],
                regex: /(;)|({)/,
                next: "pop"
            }, {
                token: "meta.brace.curly.cfscript",
                regex: /\(/,
                push: [{
                    token: "meta.brace.curly.cfscript",
                    regex: /\)/,
                    next: "pop"
                }, {
                    token: "punctuation.definition.seperator.arguments.cfscript",
                    regex: /,/
                }, {
                    token: "entity.other.operator-parameter.cfscript",
                    regex: /\w+\s*(?=\=)/,
                    caseInsensitive: true
                }, {
                    include: "#cfscript-code"
                }]
            }, {
                token: "entity.other.attribute-name.cfscript",
                regex: /\w+\s*(?=\=)/,
                caseInsensitive: true
            }, {
                include: "#cfcomments"
            }, {
                include: "#comments"
            }, {
                include: "#cfscript-code"
            }, {
                defaultToken: "meta.operator.cfscript"
            }]
        }],
        "#component-operators": [{
            token: [
                "entity.name.tag.operator.component.cfscript",
                "meta.operator.cfscript meta.class.component.cfscript"
            ],
            regex: /\b(component)\b(\s+)(?![\.\/>=,#\)])/,
            caseInsensitive: true,
            push: [{
                token: "meta.operator.cfscript meta.class.component.cfscript",
                regex: /(?=[;{\(])/,
                next: "pop"
            }, {
                include: "#component-extends-attribute"
            }, {
                token: "entity.other.attribute-name.cfscript",
                regex: /\w+\s*(?=\=)/,
                caseInsensitive: true
            }, {
                include: "#cfscript-code"
            }, {
                defaultToken: "meta.operator.cfscript meta.class.component.cfscript"
            }]
        }],
        "#component-extends-attribute": [{
            token: [
                "entity.name.tag.operator-attribute.extends.cfml",
                "meta.component.attribute-with-value.extends.cfml",
                "keyword.operator.assignment.cfscript",
                "meta.component.attribute-with-value.extends.cfml"
            ],
            regex: /\b(extends)\b(\s*)(=)(\s*)(?=")/,
            push: [{
                token: [],
                regex: /(?=[\s{])/,
                next: "pop"
            }, {
                token: "punctuation.definition.string.begin.cfscript",
                regex: /"/,
                push: [{
                    token: "punctuation.definition.string.end.cfscript",
                    regex: /"/,
                    next: "pop"
                }, {
                    defaultToken: "string.quoted.double.cfml"
                }]
            }, {
                token: "punctuation.definition.string.begin.cfscript",
                regex: /'/,
                push: [{
                    token: "punctuation.definition.string.end.cfscript",
                    regex: /'/,
                    next: "pop"
                }, {
                    defaultToken: "string.quoted.single.cfscript"
                }]
            }, {
                defaultToken: "meta.component.attribute-with-value.extends.cfml"
            }]
        }],
        "#storage-types": [{
            token: "storage.type.primitive.cfscript",
            regex: /\b(?:function|string|date|struct|array|void|binary|numeric|boolean|query|xml|uuid|any)\b/,
            caseInsensitive: true
        }],
        "#constants": [{
            token: "constant.numeric.cfscript",
            regex: /(?:\b[0-9]+|\.[0-9]+[0-9\.]*|0(?:x|X)[0-9a-fA-F]+|\.[0-9]+(?:(?:e|E)(?:\+|-)?[0-9]+)?(?:[LlFfUuDd]|UL|ul)?)\b/
        }, {
            token: "constant.language.cfscript",
            regex: /\b(?:true|false|null)\b/,
            caseInsensitive: true
        }, {
            token: "constant.other.cfscript",
            regex: /\b_?[A-Z][A-Z0-9_]+\b/
        }],
        "#comments": [{
            token: "punctuation.definition.comment.cfscript",
            regex: /\/\*\*\//
        }, {
            include: "text.html.javadoc"
        }, {
            include: "#comment-block"
        }, {
            token: [
                "punctuation.definition.comment.cfscript",
                "comment.line.double-slash.cfscript",
                "text"
            ],
            regex: /(\/\/)(.*?[^\s])(\s*$)/
        }],
        "#comment-block": [{
            token: "punctuation.definition.comment.cfscript",
            regex: /\/\*/,
            push: [{
                token: "punctuation.definition.comment.cfscript",
                regex: /\*\//,
                next: "pop"
            }, {
                defaultToken: "comment.block.cfscript"
            }]
        }],
        "#strings": [{
            include: "#string-quoted-double"
        }, {
            include: "#string-quoted-single"
        }],
        "#string-quoted-double": [{
            token: "punctuation.definition.string.begin.cfscript",
            regex: /"/,
            push: [{
                token: "punctuation.definition.string.end.cfscript",
                regex: /"(?!")/,
                next: "pop"
            }, {
                token: "constant.character.escape.quoted.double.cfscript",
                regex: /""/
            }, {
                include: "#nest_hash"
            }, {
                defaultToken: "string.quoted.double.cfscript"
            }]
        }],
        "#string-quoted-single": [{
            token: "punctuation.definition.string.begin.cfscript",
            regex: /'/,
            push: [{
                token: "punctuation.definition.string.end.cfscript",
                regex: /'(?!')/,
                next: "pop"
            }, {
                token: "constant.character.escape.quoted.single.cfscript",
                regex: /''/
            }, {
                include: "#nest_hash"
            }, {
                defaultToken: "string.quoted.single.cfscript"
            }]
        }],
        "#keywords": [{
            token: "keyword.other.new.cfscript",
            regex: /\bnew\b/,
            caseInsensitive: true
        }, {
            token: "keyword.operator.comparison.cfscript",
            regex: /===?|!|!=|<=|>=|<|>/
        }, {
            token: "keyword.operator.decision.cfscript",
            regex: /\b(?:GREATER|LESS|THAN|EQUAL\s+TO|DOES|CONTAINS|EQUAL|EQ|NEQ|LT|LTE|LE|GT|GTE|GE|AND|IS)\b/,
            caseInsensitive: true
        }, {
            token: "keyword.operator.increment-decrement.cfscript",
            regex: /\-\-|\+\+/
        }, {
            token: "keyword.operator.arithmetic.cfscript",
            regex: /(?:\^|\-|\+|\*|\/|\\|%|\-=|\+=|\*=|\/=|%=|\bMOD\b)/,
            caseInsensitive: true
        }, {
            token: "keyword.operator.concat.cfscript",
            regex: /&|&=/
        }, {
            token: "keyword.operator.assignment.cfscript",
            regex: /=/
        }, {
            token: "keyword.operator.logical.cfscript",
            regex: /\b(?:NOT|!|AND|&&|OR|\|\||XOR|EQV|IMP)\b/,
            caseInsensitive: true
        }, {
            token: "keyword.operator.ternary.cfscript",
            regex: /\?|:/
        }, {
            token: "punctuation.terminator.cfscript",
            regex: /;/
        }],
        "#function-call": [{
            token: [
                "support.function.cfscript",
                "entity.name.function-call.cfscript",
                "meta.function-call.cfscript",
                "punctuation.definition.arguments.begin.cfscript"
            ],
            regex: /(?:(abs|acos|addsoaprequestheader|addsoapresponseheader|ajaxlink|ajaxonload|applicationstop|arrayappend|arrayavg|arrayclear|arraycontains|arraydelete|arraydeleteat|arrayfind|arrayfindnocase|arrayinsertat|arrayisdefined|arrayisempty|arraylen|arraymax|arraymin|arraynew|arrayprepend|arrayresize|arrayset|arraysort|arraysum|arrayswap|arraytolist|asc|asin|atn|authenticatedcontext|authenticateduser|binarydecode|binaryencode|bitand|bitmaskclear|bitmaskread|bitmaskset|bitnot|bitor|bitshln|bitshrn|bitxor|cacheget|cachegetallids|cachegetmetadata|cachegetproperties|cachegetsession|cacheput|cacheremove|cachesetproperties|ceiling|charsetdecode|charsetencode|chr|cjustify|compare|comparenocase|cos|createdate|createdatetime|createobject|createodbcdate|createodbcdatetime|createodbctime|createtime|createtimespan|createuuid|dateadd|datecompare|dateconvert|datediff|dateformat|datepart|day|dayofweek|dayofweekasstring|dayofyear|daysinmonth|daysinyear|decimalformat|decrementvalue|decrypt|decryptbinary|deleteclientvariable|deserializejson|de|directorycreate|directorydelete|directoryexists|directorylist|directoryrename|dollarformat|dotnettocftype|duplicate|encrypt|encryptbinary|entitydelete|entityload|entityloadbyexample|entityloadbypk|entitymerge|entitynew|entityreload|entitysave|entitytoquery|evaluate|exp|expandpath|fileclose|filecopy|filedelete|fileexists|fileiseof|filemove|fileopen|fileread|filereadbinary|filereadline|fileseek|filesetaccessmode|filesetattribute|filesetlastmodified|fileskipbytes|fileupload|fileuploadall|filewrite|filewriteline|find|findnocase|findoneof|firstdayofmonth|fix|formatbasen|generatesecretkey|getauthuser|getbasetagdata|getbasetaglist|getbasetemplatepath|getclientvariableslist|getcomponentmetadata|getcontextroot|getcurrenttemplatepath|getdirectoryfrompath|getencoding|getexception|getfilefrompath|getfileinfo|getfunctioncalledname|getfunctionlist|getgatewayhelper|gethttprequestdata|gethttptimestring|getk2serverdoccount|getk2serverdoccountlimit|getlocale|getlocaledisplayname|getlocalhostip|getmetadata|getmetricdata|getpagecontext|getrequest|getrequesturi|getprinterinfo|getprinterlist|getprofilesections|getprofilestring|getreadableimageformats|getsoaprequest|getsoaprequestheader|getsoapresponse|getsoapresponseheader|gettempdirectory|gettempfile|gettemplatepath|gettickcount|gettimezoneinfo|gettoken|getuserroles|getvfsmetadata|getwriteableimageformats|hash|hour|htmlcodeformat|htmleditformat|iif|imageaddborder|imageblur|imageclearrect|imagecopy|imagecrop|imagedrawarc|imagedrawbeveledrect|imagedrawcubiccurve|imagedrawline|imagedrawlines|imagedrawoval|imagedrawpoint|imagedrawquadraticcurve|imagedrawrect|imagedrawroundrect|imagedrawtext|imageflip|imagegetblob|imagegetbufferedimage|imagegetexifmetadata|imagegetexiftag|imagegetheight|imagegetiptcmetadata|imagegetiptctag|imagegetwidth|imagegrayscale|imageinfo|imagenegative|imagenew|imageoverlay|imagepaste|imageread|imagereadbase64|imageresize|imagerotate|imagerotatedrawingaxis|imagescaletofit|imagesetantialiasing|imagesetbackgroundcolor|imagesetdrawingcolor|imagesetdrawingstroke|imagesetdrawingtransparency|imagesharpen|imageshear|imagesheardrawingaxis|imagetranslate|imagetranslatedrawingaxis|imagewrite|imagewritebase64|imagexordrawingmode|incrementvalue|inputbasen|insert|int|isarray|isauthenticated|isauthorized|isbinary|isboolean|iscustomfunction|isdate|isddx|isdebugmode|isdefined|isimage|isimagefile|isinstanceof|isipv6|isjson|isk2serverabroker|isk2serverdoccountexceeded|isk2serveronline|isleapyear|islocalhost|isnull|isnumeric|isnumericdate|isobject|ispdffile|ispdfobject|isprotected|isquery|issimplevalue|issoaprequest|isspreadsheetfile|isspreadsheetobject|isstruct|isuserinanyrole|isuserinrole|isuserloggedin|isvalid|iswddx|isxml|isxmlattribute|isxmldoc|isxmlelem|isxmlnode|isxmlroot|javacast|jsstringformat|lcase|left|len|listappend|listchangedelims|listcontains|listcontainsnocase|listdeleteat|listfind|listfindnocase|listfirst|listgetat|listinsertat|listlast|listlen|listprepend|listqualify|listrest|listsetat|listsort|listtoarray|listvaluecount|listvaluecountnocase|ljustify|location|log|log10|lscurrencyformat|lsdateformat|lseurocurrencyformat|lsiscurrency|lsisdate|lsisnumeric|lsnumberformat|lsparsecurrency|lsparsedatetime|lsparseeurocurrency|lsparsenumber|lstimeformat|ltrim|max|mid|min|minute|month|monthasstring|now|numberformat|objectequals|objectload|objectsave|ormclearsession|ormclosesession|ormcloseallsessions|ormevictcollection|ormevictentity|ormevictqueries|ormexecutequery|ormflush|ormflushall|ormgetsession|ormgetsessionfactory|ormreload|paragraphformat|parameterexists|parsedatetime|pi|precisionevaluate|preservesinglequotes|quarter|queryaddcolumn|queryaddrow|queryconvertforgrid|querynew|querysetcell|quotedvaluelist|rand|randomize|randrange|refind|refindnocase|rematch|rematchnocase|releasecomobject|removechars|repeatstring|replace|replacelist|replacenocase|rereplace|rereplacenocase|reverse|right|rjustify|round|rtrim|second|sendgatewaymessage|serializejson|setencoding|setlocale|setprofilestring|setvariable|sgn|sin|sleep|spanexcluding|spanincluding|spreadsheetaddcolumn|spreadsheetaddimage|spreadsheetaddfreezepane|spreadsheetaddinfo|spreadsheetaddrow|spreadsheetaddrows|spreadsheetaddsplitpane|spreadsheetcreatesheet|spreadsheetdeletecolumn|spreadsheetdeletecolumns|spreadsheetdeleterow|spreadsheetdeleterows|spreadsheetformatcell|spreadsheetformatcolumn|spreadsheetformatcellrange|spreadsheetformatcolumns|spreadsheetformatrow|spreadsheetformatrows|spreadsheetgetcellcomment|spreadsheetgetcellformula|spreadsheetgetcellvalue|spreadsheetinfo|spreadsheetmergecells|spreadsheetnew|spreadsheetread|spreadsheetreadbinary|spreadsheetremovesheet|spreadsheetsetactivesheet|spreadsheetsetactivesheetnumber|spreadsheetsetcellcomment|spreadsheetsetcellformula|spreadsheetsetcellvalue|spreadsheetsetcolumnwidth|spreadsheetsetfooter|spreadsheetsetheader|spreadsheetsetrowheight|spreadsheetshiftcolumnsspreadsheetshiftrows|spreadsheetwrite|sqr|stripcr|structappend|structclear|structcopy|structcount|structdelete|structfind|structfindkey|structfindvalue|structget|structinsert|structisempty|structkeyarray|structkeyexists|structkeylist|structnew|structsort|structupdate|tan|threadjoin|threadterminate|throw|timeformat|tobase64|tobinary|toscript|tostring|trace|transactioncommit|transactionrollback|transactionsetsavepoint|trim|ucase|urldecode|urlencodedformat|urlsessionformat|val|valuelist|verifyclient|week|wrap|writedump|writelog|writeoutput|xmlchildpos|xmlelemnew|xmlformat|xmlgetnodetype|xmlnew|xmlparse|xmlsearch|xmltransform|xmlvalidate|year|yesnoformat)|(\w+))(\s*)(\()/,
            caseInsensitive: true,
            push: [{
                token: "punctuation.definition.arguments.end.cfscript",
                regex: /\)/,
                next: "pop"
            }, {
                token: "punctuation.definition.seperator.arguments.cfscript",
                regex: /,/
            }, {
                token: "entity.other.method-parameter.cfscript",
                regex: /\w+\s*(?=\=)/,
                caseInsensitive: true
            }, {
                include: "#cfcomments"
            }, {
                include: "#comments"
            }, {
                include: "#tag-operators"
            }, {
                include: "#cfscript-code"
            }, {
                defaultToken: "meta.function-call.cfscript"
            }]
        }],
        "#nest_hash": [{
            token: "string.escaped.hash.cfscript",
            regex: /##/
        }, {
            token: "punctuation.definition.hash.begin.cfscript",
            regex: /#(?=.*#)/,
            push: [{
                token: "punctuation.definition.hash.end.cfscript",
                regex: /#/,
                next: "pop"
            }, {
                include: "#cfscript-code"
            }, {
                defaultToken: "meta.inline.hash.cfscript"
            }]
        }],
        "#variables": [{
            token: "storage.modifier.var.cfscript",
            regex: /\bvar\b/,
            caseInsensitive: true
        }, {
            token: "variable.language.cfscript",
            regex: /\b(?:this|key)(?!\.)/,
            caseInsensitive: true
        }, {
            token: "punctuation.definition.seperator.variable.cfscript",
            regex: /\./
        }, {
            token: [
                "variable.language.cfscript",
                "variable.other.cfscript"
            ],
            regex: /\b(application|arguments|attributes|caller|cgi|client|cookie|flash|form|local|request|server|session|this|thistag|thread|threadlocal|url|variables|super|self|argumentcollection)\b|(\w+)/,
            caseInsensitive: true
        }],
        "#sql-code": [{
            token: [
                "entity.name.function.query.cfscript, meta.toc-list.query.cfscript",
                "source.sql.embedded.cfscript",
                "support.function.cfscript",
                "source.sql.embedded.cfscript"
            ],
            regex: /([\w+\.]+)(\.)(setsql)(\(\s*["|'])/,
            caseInsensitive: true,
            push: [{
                token: "punctuation.parenthesis.end.cfscript",
                regex: /["|']\s*\)/,
                next: "pop"
            }, {
                include: "#nest_hash"
            }, {
                include: "source.sql"
            }, {
                defaultToken: "source.sql.embedded.cfscript"
            }]
        }],
        "#cfcomments": [{
            token: "comment.line.cfml",
            regex: /<!---.*--->/
        }, {
            token: "punctuation.definition.comment.cfml",
            regex: /<!---/,
            push: [{
                token: "punctuation.definition.comment.cfml",
                regex: /--->/,
                next: "pop"
            }, {
                include: "#cfcomments"
            }, {
                defaultToken: "comment.block.cfml"
            }]
        }]
    }
    
    this.normalizeRules();
};

CFScriptHighlightRules.metaData = {
    comment: "This tmLanguage file is used internally by ColdFusion and Component tmLanguage files",
    fileTypes: [],
    foldingStartMarker: "^.*\\bfunction\\s*([\\w\\$]+\\s*)?\\([^\\)]*\\)(\\s*\\{[^\\}]*)?\\s*$",
    foldingStopMarker: "^\\s*\\}",
    name: "CFScript",
    scopeName: "source.cfscript"
}


oop.inherits(CFScriptHighlightRules, TextHighlightRules);

exports.CFScriptHighlightRules = CFScriptHighlightRules;
});